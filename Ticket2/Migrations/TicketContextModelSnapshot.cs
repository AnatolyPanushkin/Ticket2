// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ticket2;

namespace Ticket2.Migrations
{
    [DbContext(typeof(TicketContext))]
    partial class TicketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("adminpack")
                .HasAnnotation("Relational:Collation", "Russian_Russia.1251")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Ticket2.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Ticket_Number")
                        .HasColumnType("bigint")
                        .HasColumnName("ticket_number");

                    b.Property<string>("Airline_Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("airline_code");

                    b.Property<DateTime>("Arrive_Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrive_datetime");

                    b.Property<string>("Arrive_Place")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("arrive_place");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<DateTime>("Depart_Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("depart_datetime");

                    b.Property<string>("Depart_Place")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("depart_place");

                    b.Property<long>("Doc_Number")
                        .HasColumnType("bigint")
                        .HasColumnName("doc_number");

                    b.Property<string>("Doc_Type")
                        .HasColumnType("text")
                        .HasColumnName("doc_type");

                    b.Property<int>("Flight_Num")
                        .HasColumnType("integer")
                        .HasColumnName("flight_num");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Operation_Place")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operation_place");

                    b.Property<string>("Operation_Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operation_type");

                    b.Property<DateTime>("Operration_Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("operration_time");

                    b.Property<string>("Passenger_Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passenger_type");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Pnr_Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pnr_id");

                    b.Property<bool>("Refund")
                        .HasColumnType("boolean")
                        .HasColumnName("refund");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<int>("Ticket_Type")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_type");

                    b.HasKey("Id", "Ticket_Number")
                        .HasName("segments_pkey");

                    b.ToTable("segments");
                });
#pragma warning restore 612, 618
        }
    }
}
